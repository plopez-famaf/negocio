name: Service Communication & Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 6 AM UTC
    - cron: '0 6 * * *'

env:
  NODE_VERSION: '18'
  REDIS_URL: 'redis://localhost:6379'
  API_URL: 'http://localhost:3001'
  WS_URL: 'ws://localhost:3001/ws'

jobs:
  service-tests:
    name: Service Communication Tests
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        test-suite: [quick, full]
        include:
          - test-suite: quick
            max-connections: 25
            test-duration: 15
          - test-suite: full
            max-connections: 100
            test-duration: 60

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        # Install root dependencies
        npm install
        
        # Install bg-identity-ai dependencies
        cd bg-identity-ai
        npm install
        cd ..
        
        # Install threatguard-cli dependencies
        cd threatguard-cli
        npm install
        cd ..
        
        # Install test suite dependencies
        cd test
        npm install
        cd ..

    - name: Build ThreatGuard CLI
      run: |
        cd threatguard-cli
        npm run build
        cd ..

    - name: Start bg-threat-ai service
      run: |
        cd bg-identity-ai
        npm run dev &
        echo $! > ../bg-threat-ai.pid
        cd ..
        
        # Wait for service to be ready
        timeout 60 bash -c 'until curl -s http://localhost:3001/health > /dev/null; do sleep 2; done'
      env:
        PORT: 3001
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Start bg-web service (optional)
      run: |
        cd bg-web
        npm run build
        npm run start &
        echo $! > ../bg-web.pid
        cd ..
        
        # Wait for service to be ready (allow failure)
        timeout 30 bash -c 'until curl -s http://localhost:3000/api/health > /dev/null; do sleep 2; done' || true
      env:
        PORT: 3000
      continue-on-error: true

    - name: Run Service Health Checks
      run: |
        echo "🏥 Checking service health..."
        
        # Check bg-threat-ai
        curl -f http://localhost:3001/health || exit 1
        echo "✅ bg-threat-ai service healthy"
        
        # Check bg-web (optional)
        if curl -s http://localhost:3000/api/health > /dev/null; then
          echo "✅ bg-web service healthy"
        else
          echo "⚠️ bg-web service not available (optional)"
        fi

    - name: Run Integration Tests
      run: |
        cd test
        
        if [ "${{ matrix.test-suite }}" = "quick" ]; then
          npm run test:quick
        else
          npm run test:full
        fi
      env:
        MAX_CONNECTIONS: ${{ matrix.max-connections }}
        TEST_DURATION: ${{ matrix.test-duration }}
        CLI_PATH: '../threatguard-cli/dist/index.js'

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.test-suite }}
        path: |
          test/test-results.json
          test/*.log
        retention-days: 30

    - name: Generate test summary
      if: always()
      run: |
        cd test
        if [ -f test-results.json ]; then
          echo "## Test Results Summary (${{ matrix.test-suite }})" >> $GITHUB_STEP_SUMMARY
          
          # Extract key metrics
          success_rate=$(jq -r '.overall.passed / .overall.total * 100 | floor' test-results.json 2>/dev/null || echo "0")
          total_tests=$(jq -r '.overall.total' test-results.json 2>/dev/null || echo "0")
          passed_tests=$(jq -r '.overall.passed' test-results.json 2>/dev/null || echo "0")
          failed_tests=$(jq -r '.overall.failed' test-results.json 2>/dev/null || echo "0")
          duration=$(jq -r '.overall.duration' test-results.json 2>/dev/null || echo "0")
          
          echo "- **Success Rate:** ${success_rate}%" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Tests:** ${total_tests}" >> $GITHUB_STEP_SUMMARY
          echo "- **Passed:** ${passed_tests} ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **Failed:** ${failed_tests} ❌" >> $GITHUB_STEP_SUMMARY
          echo "- **Duration:** $((duration / 1000))s" >> $GITHUB_STEP_SUMMARY
          
          # Service status
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Service Status" >> $GITHUB_STEP_SUMMARY
          jq -r '.services | to_entries[] | "- **\(.key):** \(.value.status)"' test-results.json >> $GITHUB_STEP_SUMMARY 2>/dev/null || true
          
          # Test suite status  
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Suite Status" >> $GITHUB_STEP_SUMMARY
          jq -r '.tests | to_entries[] | "- **\(.key):** \(if .value.success then "✅ PASSED" else "❌ FAILED" end)"' test-results.json >> $GITHUB_STEP_SUMMARY 2>/dev/null || true
          
        else
          echo "❌ No test results found" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Stop services
      if: always()
      run: |
        # Stop bg-threat-ai
        if [ -f bg-threat-ai.pid ]; then
          kill $(cat bg-threat-ai.pid) || true
          rm bg-threat-ai.pid
        fi
        
        # Stop bg-web  
        if [ -f bg-web.pid ]; then
          kill $(cat bg-web.pid) || true
          rm bg-web.pid
        fi
        
        # Clean up any remaining processes
        pkill -f "npm run dev" || true
        pkill -f "npm run start" || true

  performance-regression:
    name: Performance Regression Tests
    runs-on: ubuntu-latest
    needs: service-tests
    if: github.event_name == 'pull_request'
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup services and run performance tests
      run: |
        # Install and start services (similar to above)
        npm install
        cd bg-identity-ai && npm install && npm run dev &
        cd ../test && npm install
        
        # Wait for service
        timeout 60 bash -c 'until curl -s http://localhost:3001/health > /dev/null; do sleep 2; done'
        
        # Run only performance tests
        npm run test:performance
      env:
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Compare performance metrics
      run: |
        echo "🎯 Performance regression analysis would be implemented here"
        echo "- Compare current metrics vs baseline"
        echo "- Flag performance degradations >10%"
        echo "- Update performance baselines"

  nightly-stress-test:
    name: Nightly Stress Tests
    runs-on: ubuntu-latest
    if: github.event.schedule
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Run extended stress tests
      run: |
        # Setup services
        npm install
        cd bg-identity-ai && npm install && npm run dev &
        cd ../test && npm install
        
        # Wait for service
        timeout 60 bash -c 'until curl -s http://localhost:3001/health > /dev/null; do sleep 2; done'
        
        # Run extended stress tests
        MAX_CONNECTIONS=500 TEST_DURATION=300 npm run test
      env:
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Upload stress test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: nightly-stress-test-results
        path: |
          test/test-results.json
        retention-days: 90

    - name: Notify on failure
      if: failure()
      run: |
        echo "🚨 Nightly stress tests failed!"
        echo "Check the test results for performance degradations"
        # In a real setup, this would send notifications to Slack/email