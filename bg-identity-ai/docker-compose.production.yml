# =================================================================
# PRODUCTION DOCKER COMPOSE CONFIGURATION
# bg-threat-ai Console-First Threat Detection Platform
# =================================================================

version: '3.8'

services:
  # =================================================================
  # Redis Service (Production Configuration)
  # =================================================================
  redis:
    image: redis:7-alpine
    container_name: bg-threat-ai-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-your-secure-redis-password}
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD:-your-secure-redis-password}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --timeout 300
      --tcp-keepalive 60
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - threat-detection-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

  # =================================================================
  # bg-threat-ai Service (Production Configuration)
  # =================================================================
  bg-threat-ai:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: bg-threat-ai-service-prod
    restart: unless-stopped
    ports:
      - "3002:3002"
    env_file:
      - .env.production
    environment:
      - NODE_ENV=production
      - PORT=3002
      - LOG_LEVEL=info
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-your-secure-redis-password}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-your-secure-redis-password}@redis:6379/0
      - JWT_SECRET=${JWT_SECRET}
      - BG_WEB_API_KEY=${BG_WEB_API_KEY}
      - BG_WEB_API_URL=${BG_WEB_API_URL:-https://yourdomain.com}
      - CORS_ORIGIN=${CORS_ORIGIN:-https://yourdomain.com}
      - SENTRY_DSN=${SENTRY_DSN}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - EMAIL_SMTP_HOST=${EMAIL_SMTP_HOST}
      - EMAIL_SMTP_USER=${EMAIL_SMTP_USER}
      - EMAIL_SMTP_PASSWORD=${EMAIL_SMTP_PASSWORD}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - threat-detection-network
    volumes:
      - ./logs:/app/logs
      - /etc/ssl/certs:/etc/ssl/certs:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '2.0'
        reservations:
          memory: 256M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # =================================================================
  # NGINX Reverse Proxy (Production Load Balancer)
  # =================================================================
  nginx:
    image: nginx:alpine
    container_name: bg-threat-ai-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/ssl/private:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - bg-threat-ai
    networks:
      - threat-detection-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.5'

  # =================================================================
  # Monitoring and Logging (Optional)
  # =================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: bg-threat-ai-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - threat-detection-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: bg-threat-ai-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - threat-detection-network
    profiles:
      - monitoring

# =================================================================
# Networks
# =================================================================
networks:
  threat-detection-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =================================================================
# Volumes
# =================================================================
volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# =================================================================
# PRODUCTION DEPLOYMENT INSTRUCTIONS
# =================================================================

# 1. Environment Setup:
#    cp .env.example .env.production
#    # Edit .env.production with production values
#
# 2. SSL Certificates:
#    mkdir -p ssl nginx/conf.d
#    # Place SSL certificates in ssl/ directory
#
# 3. Build and Deploy:
#    docker-compose -f docker-compose.production.yml build
#    docker-compose -f docker-compose.production.yml up -d
#
# 4. Health Check:
#    curl -f http://localhost/health
#    curl -f https://yourdomain.com/health
#
# 5. Monitor:
#    docker-compose -f docker-compose.production.yml logs -f
#    docker-compose -f docker-compose.production.yml ps
#
# 6. Enable Monitoring (Optional):
#    docker-compose -f docker-compose.production.yml --profile monitoring up -d
#
# 7. Scaling:
#    docker-compose -f docker-compose.production.yml up --scale bg-threat-ai=3 -d