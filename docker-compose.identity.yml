version: '3.8'

services:
  # BehaviorGuard Identity AI Service
  bg-identity-ai:
    build:
      context: ./bg-identity-ai
      dockerfile: Dockerfile
    container_name: bg-identity-ai
    ports:
      - "3001:3001"
    environment:
      # Application Configuration
      - NODE_ENV=production
      - PORT=3001
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3002
      
      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      
      # Authentication
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-key}
      - JWT_EXPIRES_IN=24h
      
      # File Upload Limits
      - MAX_FILE_SIZE=10485760  # 10MB
      - MAX_FILES_PER_REQUEST=3
      
      # AI/ML Configuration
      - MODEL_VERSION=1.0.0
      - PROCESSING_TIMEOUT=30000
      - CONFIDENCE_THRESHOLD=0.75
      
      # Logging
      - LOG_LEVEL=info
      - LOG_FORMAT=json
    volumes:
      - ./logs/identity-ai:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      - redis
      - postgres
    networks:
      - bg-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Main Web Application (bg-web)
  bg-web:
    build:
      context: ./bg-web
      dockerfile: Dockerfile
    container_name: bg-web
    ports:
      - "3000:3000"
    environment:
      # Application Configuration
      - NODE_ENV=production
      - NEXT_PUBLIC_SITE_URL=http://localhost:3000
      
      # Identity AI Service
      - IDENTITY_AI_URL=http://bg-identity-ai:3001
      
      # Database Configuration
      - DATABASE_URL=${DATABASE_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      
      # Authentication
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=http://localhost:3000
      
      # Stripe Configuration
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      
      # Redis Configuration
      - REDIS_URL=redis://redis:6379/1
    volumes:
      - ./logs/web:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      - bg-identity-ai
      - redis
      - postgres
    networks:
      - bg-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    restart: unless-stopped

  # AI Dashboard Service
  bg-ai-dashboard:
    build:
      context: ./bg-ai-dashboard
      dockerfile: Dockerfile
    container_name: bg-ai-dashboard
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=production
      - BG_IDENTITY_AI_URL=http://bg-identity-ai:3001
      - BG_WEB_URL=http://bg-web:3000
      - REDIS_URL=redis://redis:6379/2
    volumes:
      - ./logs/ai-dashboard:/app/logs
    depends_on:
      - bg-identity-ai
      - redis
    networks:
      - bg-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Mobile AI Service (for mobile app backend)
  bg-mobile-ai:
    build:
      context: ./bg-mobile-ai
      dockerfile: Dockerfile
    container_name: bg-mobile-ai
    ports:
      - "3003:3000"
    environment:
      - NODE_ENV=production
      - IDENTITY_AI_URL=http://bg-identity-ai:3001
      - REDIS_URL=redis://redis:6379/3
      - MOBILE_API_KEY=${MOBILE_API_KEY:-mobile-api-key}
    volumes:
      - ./logs/mobile-ai:/app/logs
    depends_on:
      - bg-identity-ai
      - redis
    networks:
      - bg-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    restart: unless-stopped

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: bg-redis
    ports:
      - "6379:6379"
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 1gb 
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
      - ./logs/redis:/var/log/redis
    networks:
      - bg-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bg-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-behaviorguard}
      - POSTGRES_USER=${POSTGRES_USER:-bguser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-bgpassword}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - ./logs/postgres:/var/log/postgresql
    networks:
      - bg-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bguser}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # NGINX Reverse Proxy and Load Balancer
  nginx:
    image: nginx:alpine
    container_name: bg-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - bg-web
      - bg-identity-ai
      - bg-ai-dashboard
    networks:
      - bg-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: bg-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - bg-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: bg-grafana
    ports:
      - "3010:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - bg-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    restart: unless-stopped

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  bg-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16